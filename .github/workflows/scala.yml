name: Scala CI

on:
  push:
    branches:
      - master
      - release/*
      - dev/*
      - cluster/*
    tags:
      - '*'
  pull_request:
    branches:
      - master
      - release/*
      - dev/*
      - cluster/*
  workflow_dispatch:
jobs:
  tarsrc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: echo $GITHUB_ENV
        run: echo $GITHUB_ENV
      - name: echo $GITHUB_REF
        run: echo $GITHUB_REF
      - name: its a branch
        if: github.ref_type == 'branch'
        run: echo "REF_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / _)" >> $GITHUB_ENV
      - name: its a tag
        if: github.ref_type == 'tag'
        run: echo "REF_NAME=$(echo ${GITHUB_REF#refs/tags/} | tr / _)" >> $GITHUB_ENV
      - name: echo REF_NAME
        run: echo ${{ env.REF_NAME }}
      - name: generate routes
        run: ./py-build-routes.py 10
      - name: tar all
        run: tar -zcf src.tar app conf lib project public sbt-dist script seed test build.sbt sbt sbt.bat sbt-debug
      - name: save tar
        uses: actions/upload-artifact@v2
        with:
          name: src.tar
          path: src.tar
  imagedev:
    runs-on: ubuntu-latest
    needs: tarsrc
    steps:
      - uses: actions/checkout@v2
      - name: Fetch artifact
        uses: actions/download-artifact@v2
        with:
          name: src.tar

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / _)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / _)" >> $GITHUB_ENV

      - name: echo branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: build image
        run: docker build -t docker-snapshots.community-boating.org/cbidb-api-dev:${{ env.BRANCH_NAME }} -f Dockerfile.build .

      - name: Log in to nexus Registry
        run: docker login -u ci -p ${{ secrets.NEXUS_PASSWORD }} docker-snapshots.community-boating.org

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: nexus push image
        run: docker push docker-snapshots.community-boating.org/cbidb-api-dev:${{ env.BRANCH_NAME }}
      - name: tag & push aws
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag docker-snapshots.community-boating.org/cbidb-api-dev:${{ env.BRANCH_NAME }} $ECR_REGISTRY/cbidb-api-dev-snapshot:${{ env.BRANCH_NAME }}
          docker push $ECR_REGISTRY/cbidb-api-dev-snapshot:${{ env.BRANCH_NAME }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
  buildpub:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'adopt'
    - name: generate routes
      run: ./py-build-routes.py 1
    - name: write git hash
      run: sed -i 's/\$\$GITHUB_SHA\$\$/'"${GITHUB_SHA}"'/' app/org/sailcbi/APIServer/Server/CBIBootLoaderLive.scala
    - name: build deb
      run: sbt debian:packageBin
    - name: rename deb
      run: mv target/CBI-DB-API_0.1.0_all.deb target/CBI-DB-API_0.1.0_all-pub.deb
    - name: save deb
      uses: actions/upload-artifact@v2
      with:
        name: CBI-DB-API_0.1.0_all-pub.deb
        path: target/CBI-DB-API_0.1.0_all-pub.deb
  imagepub:
    runs-on: ubuntu-latest
    needs: buildpub
    steps:
      - uses: actions/checkout@v2
      - name: Fetch artifact
        uses: actions/download-artifact@v2
        with:
          name: CBI-DB-API_0.1.0_all-pub.deb
      - name: rename image
        run: mv CBI-DB-API_0.1.0_all-pub.deb CBI-DB-API_0.1.0_all.deb

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / _)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / _)" >> $GITHUB_ENV

      - name: echo branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: build image
        run: docker build -t docker-snapshots.community-boating.org/cbidb-api-pub:${{ env.BRANCH_NAME }} .

      - name: Log in to nexus Registry
        run: docker login -u ci -p ${{ secrets.NEXUS_PASSWORD }} docker-snapshots.community-boating.org

      - name: nexus push image
        run: docker push docker-snapshots.community-boating.org/cbidb-api-pub:${{ env.BRANCH_NAME }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: tag & push aws
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag docker-snapshots.community-boating.org/cbidb-api-pub:${{ env.BRANCH_NAME }} $ECR_REGISTRY/cbidb-api-pub-snapshot:${{ env.BRANCH_NAME }}
          docker push $ECR_REGISTRY/cbidb-api-pub-snapshot:${{ env.BRANCH_NAME }}
  buildstaff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: generate routes
        run: ./py-build-routes.py 10
      - name: write git hash
        run: sed -i 's/\$\$GITHUB_SHA\$\$/'"${GITHUB_SHA}"'/' app/org/sailcbi/APIServer/Server/CBIBootLoaderLive.scala
      - name: build deb
        run: sbt debian:packageBin
      - name: rename deb
        run: mv target/CBI-DB-API_0.1.0_all.deb target/CBI-DB-API_0.1.0_all-staff.deb
      - name: save artifact
        uses: actions/upload-artifact@v2
        with:
          name: CBI-DB-API_0.1.0_all-staff.deb
          path: target/CBI-DB-API_0.1.0_all-staff.deb
  imagestaff:
    runs-on: ubuntu-latest
    needs: buildstaff
    steps:
      - uses: actions/checkout@v2
      - name: Fetch artifact
        uses: actions/download-artifact@v2
        with:
          name: CBI-DB-API_0.1.0_all-staff.deb
      - name: rename image
        run: mv CBI-DB-API_0.1.0_all-staff.deb CBI-DB-API_0.1.0_all.deb

      - name: Get branch name (merge)
        if: github.event_name != 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | tr / _)" >> $GITHUB_ENV

      - name: Get branch name (pull request)
        if: github.event_name == 'pull_request'
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_HEAD_REF} | tr / _)" >> $GITHUB_ENV

      - name: echo branch name
        run: echo ${{ env.BRANCH_NAME }}

      - name: build image
        run: docker build -t docker-snapshots.community-boating.org/cbidb-api-staff:${{ env.BRANCH_NAME }} .

      - name: Log in to nexus Registry
        run: docker login -u ci -p ${{ secrets.NEXUS_PASSWORD }} docker-snapshots.community-boating.org

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ secrets.AWS_ACCESS_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: push image
        run: docker push docker-snapshots.community-boating.org/cbidb-api-staff:${{ env.BRANCH_NAME }}
      - name: tag & push aws
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker tag docker-snapshots.community-boating.org/cbidb-api-staff:${{ env.BRANCH_NAME }} $ECR_REGISTRY/cbidb-api-staff-snapshot:${{ env.BRANCH_NAME }}
          docker push $ECR_REGISTRY/cbidb-api-staff-snapshot:${{ env.BRANCH_NAME }}
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}